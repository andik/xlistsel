#
# Options Configuration. 
# 
# This is actually a shell script!
# It is sourced by options.sh to generate the source-code for option parser
# and documentation.
#

# Field description

# OPTCHAR       option charachter e.g. 'c' for option '-c'
# OPTARGNAME    Name of an optional parameter in the documentation
# OPTVAR        Internal Variable name (in Source Code)
# OPTTYPE       Internal Variable Data Type
# OPTINIT       Initialisation Value of $OPTVAR when $OPTTYPE is set
# OPTDEFAULT    Default Value written in the Documentation
# OPTDESC       Description of the Option for Documentation and Source Code
# OPTPARSE      C Source about how to parse the option based on a getopt() result.
# OPTACTION     Declare a callback for a flag. See 'Actions' below.
# makeopt       call to the function which actually generates the source

#
# Parsing: use normal C Code and call 
#
#             RAISE_ERROR(opts, OPTS_ERR, "%s is no...", optarg);
#
#          upon errors.
#	
#          Example:
#
#             char* endp;
#             opts->some_number = strtol(optarg, &endp, 10);
#             if(endp == optarg)
#             	RAISE_ERROR(OPTS_ERR_PARSE, "no number", optarg);
		
#
# Actions: some flags do more than just set some variable.
#          for these cases the 'user' Variable is provided.
#          it is set upon parse_otions() and call be used to
#          call callbacks with context.
#          
#          Therefore you leave OPTPARSE and OPTVAR blank and use OPTACTION
#          instead. 
#          
#          We'll decleare the action at the beginning of options.c
#
#          p.e. OPTACTION=my_callback
#
#               will lead to a declaration
#
#                   void my_callback(void* user, const char* arg, const char** errmsg);
#
#               and will call
#
#                   my_callback(user, optarg, &opts->errstr); 
#
#               when the flag is found.
#
#					 error handling: if the callback returns something other than
#          zero, opts_parse will fail for this option.
#


# ----------------------------------------------------------------------------

OPTCHAR='b'
OPTARGNAME='button'
OPTVAR='button'
OPTTYPE=''
OPTDEFAULT=''
OPTINIT=''
OPTDESC="Adds another button with supplied label below the list. 
Can be supplied multiple times." 
OPTACTION='app_add_button'
OPTPARSE=''
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='B'
OPTARGNAME='button-cols'
OPTVAR='override_button_cols'
OPTTYPE='int'
OPTDEFAULT='0'
OPTINIT='0'
OPTDESC="If greater than 0, perform a linebreak after the number 
of 'button-cols' buttons." 
OPTACTION=''
OPTPARSE='
	char* endp;
	opts->override_button_cols = strtol(optarg, &endp, 10);
	if(endp == optarg)
		RAISE_ERROR(OPTS_ERR_PARSE, "no number", optarg);
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='d'
OPTARGNAME='desc'
OPTVAR='desc'
OPTTYPE='char*'
OPTDEFAULT=''
OPTINIT='NULL'
OPTDESC="Sets a text which is displayed above the list." 
OPTACTION=''
OPTPARSE='
	opts->desc = strdup(optarg);
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='E'
OPTARGNAME=''
OPTVAR='escape_to_exit'
OPTTYPE='int'
OPTDEFAULT=''
OPTINIT='0'
OPTDESC="If given, the dialog can be canceled by pressing the 'Esc' Key." 
OPTACTION=''
OPTPARSE='
	opts->escape_to_exit = 1;
'
makeopt


# ----------------------------------------------------------------------------

OPTCHAR='h'
OPTARGNAME=''
OPTVAR=''
OPTTYPE=''
OPTDEFAULT=''
OPTINIT=''
OPTDESC="Shows the help and exists" 
OPTACTION='app_help'
OPTPARSE=''
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='H'
OPTARGNAME='height'
OPTVAR='winheight'
OPTTYPE='int'
OPTDEFAULT='400'
OPTINIT='400'
OPTDESC="set the height of the window in pixels" 
OPTACTION=''
OPTPARSE='
	char* endp;
	opts->winheight = strtol(optarg, &endp, 10);
	if(endp == optarg)
		RAISE_ERROR(OPTS_ERR_PARSE, "no number", optarg);
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='i'
OPTARGNAME=''
OPTVAR='read_stdin'
OPTTYPE='int'
OPTDEFAULT=''
OPTINIT='0'
OPTDESC="If given, the table to display is read from stdin. Arguments are ignored" 
OPTACTION=''
OPTPARSE='
	opts->read_stdin = 1;
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='L'
OPTARGNAME=''
OPTVAR='first_line_is_header'
OPTTYPE='int'
OPTDEFAULT=''
OPTINIT='0'
OPTDESC="If given, the first line of stdin will be a heading line.
Implies '-i'"
OPTACTION=''
OPTPARSE='
	opts->first_line_is_header = 1;
	opts->read_stdin = 1;
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='o'
OPTARGNAME='output-column'
OPTVAR='output_col'
OPTTYPE='int'
OPTDEFAULT='-1'
OPTINIT='-1'
OPTDESC="Column of the selected line to output. '-1' prints full line" 
OPTACTION=''
OPTPARSE='
	char* endp;
	opts->output_col = strtol(optarg, &endp, 10);
	if(endp == optarg)
		RAISE_ERROR(OPTS_ERR_PARSE, "no number", optarg);
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='O'
OPTARGNAME='okay-button'
OPTVAR='okay_btn'
OPTTYPE='int'
OPTDEFAULT='1'
OPTINIT='0'
OPTDESC="sets the returncode/button when the user did press Enter" 
OPTACTION=''
OPTPARSE='
	char* endp;
	opts->okay_btn = strtol(optarg, &endp, 10) - 1;
	if(endp == optarg)
		RAISE_ERROR(OPTS_ERR_PARSE, "no number", optarg);
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='s' 
OPTARGNAME='separator'
OPTVAR='sep'
OPTTYPE='char*'
OPTDEFAULT=':' 
OPTINIT='":"' 
OPTDESC="the character to split the input lines into colums.
the line 'A:B:C' will be split to 'A', 'B' and 'C'" 
OPTACTION=''
OPTPARSE='
	opts->sep = strdup(optarg);
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='S'
OPTARGNAME='style'
OPTVAR='style'
OPTTYPE='int'
OPTDEFAULT='white'
OPTINIT='THEME_WHITE'
OPTDESC="set color theme. available: black, white,red, blue or dark" 
OPTACTION=''
OPTPARSE='
	if(parse_style(optarg, &opts->style) != 0)
		RAISE_ERROR(OPTS_ERR_PARSE, "no valid stylename", optarg);
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='t'
OPTARGNAME='title'
OPTVAR='title'
OPTTYPE='char*'
OPTDEFAULT=''
OPTINIT='"xlistsel"'
OPTDESC="Set the window's title" 
OPTACTION=''
OPTPARSE='
	opts->title = strdup(optarg);
'
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='T'
OPTARGNAME='header'
OPTVAR='header'
OPTTYPE=''
OPTDEFAULT=''
OPTINIT=''
OPTDESC="directly set a heading line" 
OPTACTION='app_set_header'
OPTPARSE=''
makeopt

# ----------------------------------------------------------------------------

OPTCHAR='W'
OPTARGNAME='width'
OPTVAR='winwidth'
OPTTYPE='int'
OPTDEFAULT='500'
OPTINIT='500'
OPTDESC="set the width of the window in pixels" 
OPTACTION=''
OPTPARSE='
	char* endp;
	opts->winwidth = strtol(optarg, &endp, 10);
	if(endp == optarg)
		RAISE_ERROR(OPTS_ERR_PARSE, "no number", optarg);
'
makeopt